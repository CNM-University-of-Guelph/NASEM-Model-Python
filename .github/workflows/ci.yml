name: Main Branch CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up Miniforge
      if: runner.os != 'Windows'
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-version: "latest"
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
        channels: conda-forge

    - name: Install Poetry on Linux and macOS
      if: runner.os != 'Windows'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
  
    - name: Install Poetry on Windows
      if: runner.os == 'Windows'
      run: |
        (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | python -
  
    - name: Install Dependencies and Run Tests on Linux and MacOS
      if: runner.os != 'Windows'
      run: |
        source $CONDA/bin/activate base
        conda install -c conda-forge graph-tool
        poetry install
        poetry add importlib_resources

        # Check graph-tool installation
        python -c "import graph_tool.all as gt; print('graph-tool version:', gt.__version__)"

        # # Print environment details
        # echo "PYTHONPATH: $PYTHONPATH"
        # echo "PATH: $PATH"
        # echo "Which Python: $(which python)"
        # echo "Python version: $(python --version)"
        # echo "Conda environment: $(conda info | grep 'active environment')"
        # echo "Installed packages: $(conda list)"

        # pytest --cov=nasem_dairy --cov-report=xml --cov-report=term-missing
        $CONDA/bin/python -m pytest --cov=nasem_dairy --cov-report=xml --cov-report=term-missing
        
        pip install coveralls
        coveralls
      env:
        POETRY_VIRTUALENVS_CREATE: false
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

    - name: Install Dependencies and Run Tests on Windows
      if: runner.os == 'Windows'
      run: |
        C:/Users/runneradmin/AppData/Roaming/Python/Scripts/poetry install
        C:/Users/runneradmin/AppData/Roaming/Python/Scripts/poetry add importlib_resources
        pytest --cov=nasem_dairy --cov-report=xml --cov-report=term-missing
        pip install coveralls
        coveralls
      env:
        POETRY_VIRTUALENVS_CREATE: false
        COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}